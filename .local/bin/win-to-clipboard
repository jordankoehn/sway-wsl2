#!/bin/bash

getWindowsClipboard() {
  # Often the clipboard would come up empty, so repeat until it has data
  local clipboard
  while [[ -z "$clipboard" ]]; do
    clipboard=$(/mnt/c/windows/System32/WindowsPowerShell/v1.0/powershell.exe -c Get-Clipboard)
  done

  echo -n "$clipboard"
}

monitorCurrentWindow() {
  # https://stackoverflow.com/a/70010344
  /mnt/c/windows/System32/WindowsPowerShell/v1.0/powershell.exe -c '
Add-Type @"
 using System;
 using System.Runtime.InteropServices;
 using System.Text;
 public class APIFuncs
 {
 [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
 public static extern int GetWindowText(IntPtr hwnd,StringBuilder
 lpString, int cch);
 [DllImport("user32.dll", SetLastError=true, CharSet=CharSet.Auto)]
 public static extern IntPtr GetForegroundWindow();
 [DllImport("user32.dll", SetLastError=true, CharSet=CharSet.Auto)]
 public static extern Int32 GetWindowThreadProcessId(IntPtr hWnd,out
 Int32 lpdwProcessId);
 [DllImport("user32.dll", SetLastError=true, CharSet=CharSet.Auto)]
 public static extern Int32 GetWindowTextLength(IntPtr hWnd);
 }
"@

while(1) {
	$w = [apifuncs]::GetForegroundWindow()
	$len = [apifuncs]::GetWindowTextLength($w)
	$sb = New-Object text.stringbuilder -ArgumentList ($len + 1)
	$rtnlen = [apifuncs]::GetWindowText($w,$sb,$sb.Capacity)
	write-host "Window Title: $($sb.tostring())"
	sleep -Milliseconds 250
}
'
}

processCurrentWindow() {
  if ((${#} == 0)); then
    while read -r window; do
      # Checks if we've gone from a non-wsl window to wsl, then writes to the wayland keyboard
      if [[ -z $inWSL && $window == *wlroots* ]]; then
        inWSL=1
        echo "Wrote windows clipboard to wayland clipboard"

        # Indicate to clipboard-to-win that a copy just occured
        touch /tmp/win-to-clipboard

        wl-copy <<<$(getWindowsClipboard)
        #wl-copy <<<$(/mnt/c/windows/System32/WindowsPowerShell/v1.0/powershell.exe -c Get-Clipboard)
      elif [[ $window != *wlroots* ]]; then
        unset inWSL
      fi
    done
  fi
}

monitorCurrentWindow | processCurrentWindow
